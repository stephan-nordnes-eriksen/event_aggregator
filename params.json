{"name":"Event Aggregator","tagline":"A Ruby event aggregator gem.","body":"# EventAggregator gem\r\n\r\nThe gem 'event_aggregator' is designed for use with the event aggregator pattern in Ruby.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'event_aggregator'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install event_aggregator\r\n\r\n## Usage\r\n\r\n\t#!/usr/bin/ruby\r\n\r\n\trequire \"rubygems\"\r\n\trequire \"event_aggregator\"\r\n\r\n\tclass Foo\r\n\t\tinclude EventAggregator::Listener\r\n\t\tdef initialize()\r\n\t\t\tmessage_type_register( \"foo\", lambda{|data| puts data } )\r\n\r\n\t\t\tmessage_type_register( \"foo2\", method(:handle_message) )\r\n\t\tend\r\n\r\n\t\tdef handle_message(data)\r\n\t\t\tputs data\r\n\t\tend\r\n\t\t\r\n\t\tdef foo_unregister(*args)\r\n\t\t\tmessage_type_unregister(*args)\r\n\t\tend\r\n\tend\r\n\r\n\tf = Foo.new\r\n\r\n\tEventAggregator::Message.new(\"foo\", \"bar\").publish\r\n\t#=> bar\r\n\tEventAggregator::Message.new(\"foo2\", \"data\").publish\r\n\t#=> data\r\n\tEventAggregator::Message.new(\"foo3\", \"data\").publish\r\n\t#=> []\r\n\tf.foo_unregister(\"foo2\")\r\n\tEventAggregator::Message.new(\"foo2\", \"data\").publish\r\n\t#=> []\r\n\t\r\n\t#Possible outcome:\r\n\tEventAggregator::Message.new(\"foo\", \"data\").publish\r\n\tEventAggregator::Message.new(\"foo\", \"data2\").publish\r\n\t#=> data2\r\n\t#=> data\r\n\r\n### IMPORTANT: Asynchronous by Default\r\nMessage.publish is asynchronous by default. This means that if you run event_aggregator in a script that terminates, there is a chance that the script will terminate before the workers have processed the messages and you can receive an error looking like the following: \r\n\t\r\n\tW, [2013-12-29T11:17:29.659902 #48097]  WARN -- : Terminating task: type=:call, meta={:method_name=>:perform}, status=:callwait\r\n\tD, [2013-12-29T11:17:29.660142 #48097] DEBUG -- : Celluloid::PoolManager: async call `perform` aborted!\r\n\tCelluloid::Task::TerminatedError: task was terminated\r\n\t\t/Users/user/.rvm/gems/ruby-1.9.3-p429/gems/celluloid-0.15.2/lib/celluloid/tasks/task_fiber.rb:32:in `terminate'\r\n\t\t/Users/user/.rvm/gems/ruby-1.9.3-p429/gems/celluloid-0.15.2/lib/celluloid/actor.rb:404:in `block in cleanup'\r\n\t\t/Users/user/.rvm/gems/ruby-1.9.3-p429/gems/celluloid-0.15.2/lib/celluloid/actor.rb:404:in `each'\r\n\t\t/Users/user/.rvm/gems/ruby-1.9.3-p429/gems/celluloid-0.15.2/lib/celluloid/actor.rb:404:in `cleanup'\r\n\t\t/Users/user/.rvm/gems/ruby-1.9.3-p429/gems/celluloid-0.15.2/lib/celluloid/actor.rb:375:in `shutdown'\r\n\t\t/Users/user/.rvm/gems/ruby-1.9.3-p429/gems/celluloid-0.15.2/lib/celluloid/actor.rb:185:in `run'\r\n\t\t/Users/user/.rvm/gems/ruby-1.9.3-p429/gems/celluloid-0.15.2/lib/celluloid/actor.rb:157:in `block in initialize'\r\n\t\t/Users/user/.rvm/gems/ruby-1.9.3-p429/gems/celluloid-0.15.2/lib/celluloid/thread_handle.rb:13:in `block in initialize'\r\n\t\t/Users/user/.rvm/gems/ruby-1.9.3-p429/gems/celluloid-0.15.2/lib/celluloid/internal_pool.rb:100:in `call'\r\n\t\t/Users/user/.rvm/gems/ruby-1.9.3-p429/gems/celluloid-0.15.2/lib/celluloid/internal_pool.rb:100:in `block in create'\r\n\tW, [2013-12-29T11:17:29.660271 #48097]  WARN -- : Terminating task: type=:finalizer, meta={:method_name=>:__shutdown__}, status=:callwait\r\n\r\nTo make it synchronous (not recommended) use the following:\r\n\r\n\tEventAggregator::Message.new(\"foo\", \"data\", false).publish\r\n\t#=> data\r\n\r\nThe message data is duplicated by default for each of the receiving listeners. To force the same object for all listeners, set the consisten_data property to true.\r\n\r\n\tEventAggregator::Message.new(\"foo\", \"data\", true, true).publish\r\n\t\r\nThis enables the following:\r\n\r\n\tclass Foo\r\n\t\tinclude EventAggregator::Listener\r\n\t\tdef initialize()\r\n\t\t\tmessage_type_register( \"foo\", lambda{|data| data << \" bar\" } )\r\n\t\tend\r\n\tend\r\n\r\n\tf1 = Foo.new\r\n\tf2 = Foo.new\r\n\tdata = \"foo\"\r\n\t\r\n\tEventAggregator::Message.new(\"foo\", data, true, false).publish\r\n\r\n\tputs data \r\n\t#=> \"foo\"\r\n\r\n\tEventAggregator::Message.new(\"foo\", data, true, true).publish\r\n\t\r\n\tputs data\r\n\t#=> \"foo bar bar\"\r\n\r\n\tEventAggregator::Message.new(\"foo\", data, true, true).publish\r\n\t\r\n\tputs data\r\n\t#=> \"foo bar bar bar bar\"\r\n\r\n\r\n\r\n## Usage Considerations\r\nAll messages are processed asynchronous by default. This means that there might be raise conditions in your code. \r\n\r\nIf you force synchronous message publishing you should take extra care of where in your code you produce new messages. You can very easily create infinite loops where messages are published and consumed by the same listener. Because of this it is advised not to produce messages within the callback for the listener, even when using asynchronous message publishing. Another good rule is never to produce messages of the same type as those you listen to. This does not completely guard you, as there can still exist loops between two or more listeners.\r\n\r\n## About Event Aggregators\r\nAn event aggregator is essentially a message passing service that aims at decoupling objects in your code. This is achieved with messages that has a type and some data. A message might be produced when an event, or other condition, occurs. When such conditions occurs a message can be produced with all relevant data in it. This message can then be published. The message will then be distributed to all other objects that want to receive this message type. This way the object or class that produced the message do not need to be aware of every other object that might be interested in the condition that just occurred. It also removes the need for this class to implement any consumer producer pattern or other similar methods to solving this problem. With an event aggregator the listener, the receiver of the message, does not need to know that the sender even exists. This will remove a lot of bug-producing couplings between objects and help your code become cleaner.\r\n\r\nFor more information see: http://martinfowler.com/eaaDev/EventAggregator.html \r\n\r\nOr: https://www.google.com/#q=event+aggregator\r\n\r\n## Todo:\r\n - Improving the readme and documentation in the gem.\r\n\r\n## Versioning Standard:\r\nUsing Semantic Versioning - http://semver.org/\r\n### Versioning Summary\r\n\r\n#### 0.0.X - Patch\r\n\tSmall updates and patches that are backwards-compatible. Updating from 0.0.X -> 0.0.Y should not break your code.\r\n#### 0.X - Minor\r\n\tAdding functionality and changes that are backwards-compatible. Updating from 0.X -> 0.Y should not break your code.\r\n#### X - Major\r\n\tArchitectural changes and other major changes that alter the API. Updating from X -> Y will most likely break your code.\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}